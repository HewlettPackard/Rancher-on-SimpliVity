###
# Copyright (2020) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
### 
---
- name: Retrieve User Cluster ID
  uri:
    url:  "{{ rancher.url }}/{{ rancher.apiversion }}/clusters?name={{ user_cluster.name }}"
    validate_certs: "{{ rancher.validate_certs }}"
    headers:
      Accept: application/json
      Content-Type: application/json
      Authorization: Bearer {{ bearer_token }}
    method: GET
    timeout: 4
    status_code:
    - 200
  register: res

- set_fact:
    uc_kube_config_file: "{{ install_dir }}/kube_config.{{ user_cluster.name }}.{{ userclusterID }}"
  vars:
    userclusterID:  "{{ res.json.data[0].id }}"

- name: Verify Presence of the kubeconfig file
  stat:
    path: "{{ uc_kube_config_file }}"
  register: res

- fail:
    msg: "Cannot find the kubeconfig file {{ uc_kube_config_file }} for cluster {{ user_cluster.name }}"
  when: not res.stat.exists

- name: Set variables specific to vSphere CSI Driver
  set_fact:
    csi_controller_rbac: "vsphere-csi-controller-rbac.yaml"
    csi_controller_deployment: "vsphere-csi-controller-ss.yaml.j2"
    csi_controller_node_ds: "vsphere-csi-node-ds.yaml.j2"
    csi_provisioner: "csi.vsphere.vmware.com"
  when: csi_driver == "vsphere"

- name: Set variables specific to SVT CSI Driver
  set_fact:
    csi_controller_rbac: "svt-csi-controller-rbac.yaml"
    csi_controller_deployment: "svt-csi-controller-deployment.yaml.j2"
    csi_controller_node_ds: "svt-csi-node-ds.yaml.j2"
    csi_provisioner: "csi.simplivity.hpe.com"
  when: csi_driver == "svt"

- name: Create CSI Secret
  k8s:
    state: present
    validate_certs: true
    kubeconfig: "{{ uc_kube_config_file }}"
    definition:
      kind: Secret
      apiVersion: v1
      data:
        csi-vsphere.conf: "{{ lookup('template', 'csi-secret.conf.j2') | b64encode }}"
      metadata:
        name: vsphere-config-secret
        namespace: kube-system

- name: Create CSI Config Map
  k8s:
    state: present
    validate_certs: true
    kubeconfig: "{{ uc_kube_config_file }}"
    definition:
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: cloud-config
        namespace: kube-system
      data:
        vsphere.conf: "{{ lookup('template', 'csi-vsphere.conf.j2') }}"

- name: Create Cloud Controller Manager Roles
  k8s:
    state: present
    validate_certs: true
    kubeconfig: "{{ uc_kube_config_file }}"
    definition: "{{ lookup('file', 'cloud-controller-manager-roles.yaml') }}"

- name: Create Cloud Controller Manager Role Bindings
  k8s:
    state: present
    validate_certs: true
    kubeconfig: "{{ uc_kube_config_file }}"
    definition: "{{ lookup('file', 'cloud-controller-manager-role-bindings.yaml') }}"

- name: Create Cloud Controller Manager DaemonSet
  k8s:
    state: present
    validate_certs: true
    kubeconfig: "{{ uc_kube_config_file }}"
    definition: "{{ lookup('template', 'cloud-controller-manager-ds.rancher.yaml.j2') }}"

- name: Create Controller RBAC
  k8s:
    state: present
    validate_certs: true
    kubeconfig: "{{ uc_kube_config_file }}"
    definition: "{{ lookup('file', '{{ csi_controller_rbac }}') }}"

- name: Create Controller Deployment and Driver
  k8s:
    state: present
    validate_certs: true
    kubeconfig: "{{ uc_kube_config_file }}"
    definition: "{{ lookup('template', '{{ csi_controller_deployment }}') }}"

- name: Create CSI DaemonSet
  k8s:
    state: present
    validate_certs: true
    kubeconfig: "{{ uc_kube_config_file }}"
    definition: "{{ lookup('template', '{{ csi_controller_node_ds }}') }}"

- name: Install CSI Snapshot Class CRD
  k8s:
    state: present
    validate_certs: true
    kubeconfig: "{{ uc_kube_config_file }}"
    definition: "{{ lookup('file', 'snapshot.storage.k8s.io_volumesnapshotclasses.yaml') }}"
  when: csi_driver == "svt"   ## This should work with vsphere too

- name: Install CSI Snapshot Content CRD
  k8s:
    state: present
    validate_certs: true
    kubeconfig: "{{ uc_kube_config_file }}"
    definition: "{{ lookup('file', 'snapshot.storage.k8s.io_volumesnapshotcontents.yaml') }}"
  when: csi_driver == "svt"

- name: Install CSI VolumeSnapshot CRD
  k8s:
    state: present
    validate_certs: true
    kubeconfig: "{{ uc_kube_config_file }}"
    definition: "{{ lookup('file', 'snapshot.storage.k8s.io_volumesnapshots.yaml') }}"
  when: csi_driver == "svt"

- name: Create snapshot-controller RBAC
  k8s:
    state: present
    validate_certs: true
    kubeconfig: "{{ uc_kube_config_file }}"
    definition: "{{ lookup('file', 'rbac-snapshot-controller.yaml') }}"
  when: csi_driver == "svt"

- name: Deploy snapshot-controller
  k8s:
    state: present
    validate_certs: true
    kubeconfig: "{{ uc_kube_config_file }}"
    definition: "{{ lookup('template', 'setup-snapshot-controller.yaml.j2') }}"
  when: csi_driver == "svt"

- name: Create SVT Snapshot Class
  k8s:
    state: present
    validate_certs: true
    kubeconfig: "{{ uc_kube_config_file }}"
    definition: "{{ lookup('file', 'svt-snapshot-class.yaml') }}"
  when: csi_driver == "svt"

- name: See if the CSI Storage Class exists
  k8s_info:
    kubeconfig: "{{ uc_kube_config_file }}"
    kind: StorageClass
    name: "{{ csi_storageclass_name }}"
    validate_certs: true
  register: sc

- debug:
    msg: "Storage Class '{{ csi_storageclass_name }}' already exists."
  when: sc.resources | count > 0

- block:

  - name: Get CSI Datastore Info
    vmware_datastore_info:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      datacenter_name: '{{ datacenter }}'
      name: "{{ csi_datastore_name | default(datastores[0]) }}"
      validate_certs:  "{{ vcenter_validate_certs }}"
    delegate_to: localhost
    register: csi_datastore_info

  - name: Create CSI Storage Class
    k8s:
      state: present
      validate_certs: true
      kubeconfig: "{{ uc_kube_config_file }}"
      definition: "{{ lookup('template','csi-sc.yml.j2') }}"

  - debug:
      msg: "Storage Class '{{ csi_storageclass_name }}' Created"

  when: sc.resources | count < 1
