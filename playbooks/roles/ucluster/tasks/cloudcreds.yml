###
# Copyright (2020) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###
---
- name: See if the Cloud Credential is already existing
  uri: 
    url: "{{ rancher.url }}/{{ rancher.apiversion }}/cloudcredentials?name={{ user_cluster.vcenter_credsname }}"
    validate_certs: "{{ rancher.validate_certs }}"
    headers:
      Accept: application/json
      Content-Type: application/json
      Authorization: Bearer {{ bearer_token }}
    method: GET
    timeout: 4
    status_code:
    - 200
    body_format: form-urlencoded
  register: cloudcreds

- name: Create Cloud Credentials if necessary
  uri:
    url: "{{ rancher.url }}/{{ rancher.apiversion }}/cloudcredentials"
    validate_certs: "{{ rancher.validate_certs }}"
    headers:
      Accept: application/json
      Content-Type: application/json
      Authorization: Bearer {{ bearer_token }}
    method: POST
    timeout: 4
    status_code:
    - 201
    body_format: json
    body:
      name: "{{ user_cluster.vcenter_credsname }}"
      vmwarevspherecredentialConfig:
        password: "{{ vcenter_password }}"
        username: "{{ vcenter_username }}"
        vcenter: "{{ vcenter_hostname }}"
        vcenterPort: "443"
  delegate_to: localhost
  register: res
  when: cloudcreds.json.data | count <= 0

- name: Verify the the Cloud Credentials were created
  uri: 
    url: "{{ rancher.url }}/{{ rancher.apiversion }}/cloudcredentials?name={{ user_cluster.vcenter_credsname }}"
    validate_certs: "{{ rancher.validate_certs }}"
    headers:
      Accept: application/json
      Content-Type: application/json
      Authorization: Bearer {{ bearer_token }}
    method: GET
    timeout: 4
    status_code:
    - 200
    body_format: form-urlencoded
  register: cloudcreds

- name: fail if Cloud Credentials could not be created
  fail:
  when: cloudcreds.json.data | count <= 0

- debug: var=cloudcreds.json.data[0].id
