###
# Copyright (2020) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###

- set_fact:
    env:
      KUBECONFIG: "{{ kubeconfig_file }}"
  when: proxy is not defined

- set_fact:
    env:
      KUBECONFIG: "{{ kubeconfig_file }}"
      http_proxy: "{{ proxy.http }}"
      https_proxy: "{{ proxy.http }}"
      no_proxy: "{{ proxy.except }}"
  when: proxy is defined

- name: Install k8s module prereq
  become: true
  package:
    name: python3-openshift
    state: present
  environment: "{{ env }}"

- name: Create the Config file for the Rancher helm chart
  template: 
    src: helm-values.j2
    dest: "{{ install_dir }}/helm-values.txt"

- name: Add the helm repository
  shell: |
   helm repo add rancher-{{ rancherserver_channel }} https://releases.rancher.com/server-charts/{{ rancherserver_channel }}
  environment: "{{ env }}"

- name: Create Namespace cattle-system
  k8s:
    state: present
    definition:
      kind: Namespace
      apiVersion: v1
      metadata:
        name: cattle-system
  environment: "{{ env }}"

- name: Create the K8S secret for the user supplied Rancher Certificate
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ lookup('file', rancherserver_tls_certchain_file) | b64encode }}"
        tls.key: "{{ lookup('file', rancherserver_tls_certkey_file) | b64encode }}"
      metadata:
        name: tls-rancher-ingress
        namespace: cattle-system
  environment: "{{ env }}"

- name: Load the CA certificate into a secret if needed
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      data:
        cacerts.pem: "{{ lookup('file', rancherserver_tls_cacert_file) | b64encode }}"
      metadata:
        name: tls-ca
        namespace: cattle-system
  environment: "{{ env }}"
  when: rancherserver_tls_privateCA | bool

- name: Update your local Helm chart repository cache
  shell : |
    helm repo update
  environment: "{{ env }}"

- name: Is the rancher helm release installed
  shell: |
     helm -n cattle-system ls -f rancher -q
  register: res
  environment: "{{ env }}"

- name: Install Rancher Server
  shell: |
    helm install rancher rancher-{{ rancherserver_channel }}/rancher \
      --namespace cattle-system  {{ switch_version }} \
      --values={{ install_dir }}/helm-values.txt
  vars:
    switch_version: "{% if rancherserver_version == 'latest'%}{% else %}--version={{ rancherserver_version }}{% endif %}"
  when: res.stdout_lines | count <= 0
  environment: "{{ env }}"

# This is a long operation, we run it in the background
- name: Verify the Deployment Status of Rancher Server
  shell: |
    kubectl -n cattle-system rollout status deploy/rancher
  async:  "{{ rancherserver_deploy_timeout }}"
  poll: 0
  changed_when: false
  register: res
  environment: "{{ env }}"

- name: Waiting a maximum of {{ rancherserver_deploy_timeout | int / 60 }} mns for Rancher Server to be rolled out
  async_status:
    jid: "{{ res.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  delay: 5
  changed_when: false
  retries:  "{{ ( 1 + rancherserver_deploy_timeout | int / 5 ) | int }}"

